import javax.swing.*;
import java.awt.*;
import java.awt.image.*;
import javax.imageio.*;
import java.io.*;
import java.awt.event.KeyEvent; 
import java.awt.event.KeyListener; 

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;

public class Enemy
{
  protected int x;
  protected int y;
  protected int xa;
  protected int ya;
  protected int width = 32;
  protected int height = 32;
  protected Image sprite;
  protected boolean flipped;
  protected Game game;
  protected int xL = 45;
  protected int yL = 38;
  protected Skeleton[] sList;
  protected Ghost[] gList;
  protected Ghoul[] ghList;
  protected int skeletonNumber = 0;
  protected int ghostNumber = 0;
  protected int ghoulNumber = 0;
  protected int skeletonNumber2 = 0;
  protected int ghostNumber2 = 0;
  protected int ghoulNumber2 = 0;
  protected Level level;
  protected String enemytxt;
  
  
  private int[][] enemyLayout;
  
  
  //these represent the current position of the gravedigger, the enemies will always try to go there
  protected int playerX = 0;
  protected int playerY = 0;
  
  public Enemy(int x, int y,int xa,int ya, Game game,Level level, String enemytxt) 
  {
    this.x = x;
    this.y = y;
    this.xa = xa;
    this.ya = ya;
    this.game = game;
    this.level = level;
    this.enemytxt = enemytxt;
    
    enemyLayout = new int[xL][yL];
    try
    {
      //Create a new instance of the FileReader and pass it the
      //file that needs to be read
      FileReader fr2 = new FileReader(enemytxt);
      
      //Create a new instance of the BufferedReader and
      //add the FileReader to it
      BufferedReader br2 = new BufferedReader(fr2);
      //A string variable that will temporarily what you’re reading
      String line;
      //A dual purpose line! First it reads the next line and then
      //it checks to see if that line was null. If it’s null, then
      //that means you’re at the end of the file.
      int yPos = 0;
      int xPos = 0;
      while ((line=br2.readLine()) != null)
      {
        for(int i = 0; i < line.length(); i++){
          enemyLayout[xPos][yPos] = line.charAt(i);
          xPos++;
        }
        yPos++;
        xPos = 0;
      }
      //close the file when you’re done
      br2.close();
    }
    catch(IOException e)
    {
      //Error message
    }
  }
  
  //updates the variables playerX and playerY which are used by the enemies to move toward the grave digger
  public void updateTarget(){
    //has to go through game
    playerX = game.getPlayerX();
    playerY = game.getPlayerY();
    
    
  }
  
  
  public void move(){
    int dif = 0;
    
    //if the distance between the players x and enemies x is greater than the difference between the players y and enemies y
    if(Math.abs(playerX - x) > Math.abs(playerY-y)){
      
      //difference between player's x and enemy's x
      dif = playerX - x;
      
      //the enemy is left of the player moves right
      if(dif > 0){
        xa = 1;
        ya = 0;
      }
      
      //if the enemy is right of the player moves left
      if(dif < 0){
        xa = -1;
        ya = 0;
      }
      
      //if the enemy is on the same x value as the player stops moving on the x
      if(dif == 0){
        xa = 0;
      }
    }
    else if(Math.abs(playerY - y) > Math.abs(playerX- x)){
      
      //difference between player's y and enemy's y
      dif = playerY - y;
      
      //if the enemy has a lower y value than the player / above the player, enemy moves up
      if(dif > 0){
        ya = 1;
        xa = 0;
      }
      
      //if the enemy has a greater y value / is below the player, enemy moves down
      if(dif < 0){
        ya = -1;
        xa = 0;
      }
      
      //if the enemy is on the same y value as the player stops moving on the y
      if(dif == 0){ya = 0;}
    }
    if ((x + xa <0) || (x + xa > (1280 - width) ))
      xa *= -1;
    if ((y + ya <64) || (y + ya > (960) ))
      ya *= -1;
    
    /*
     if((x%32 != 0) || (y)%32 !=0){
     if(movingLeft){
     xa = -1;
     ya = 0;
     }
     if(movingRight){
     xa = 1;
     ya = 0;
     }
     if(movingUp){
     ya = -1;
     xa = 0;
     }
     if(movingDown){
     ya = 1;
     xa = 0;
     }
     }
     else if((x%32 == 0) || (y)%32 ==0){
     if(movingLeft){
     movingLeft = false;
     xa = 0;
     ya = 0;
     }
     if(movingRight){
     movingRight = false;
     xa=0;
     ya=0;
     }
     if(movingUp){
     movingUp = false;
     xa=0;
     ya=0;
     }
     if(movingDown){
     movingDown = false;
     xa=0;
     ya=0;
     }
     }
     */
    
    
    x = x+xa;
    y =y+ya;
    
    
    
  }
  
  
  
  public void enemyReader() {
    
    for(int i = 0; i < 42; i++){
      for(int z = 0; z < 31; z++){
        if(enemyLayout[i][z] == 's'){
          skeletonNumber++;
        }
        if(enemyLayout[i][z] == 'g'){
          ghostNumber++;
        }
        if(enemyLayout[i][z] == 'h'){
          ghoulNumber++;
        }
      }
    }

    
    System.out.println(skeletonNumber + " " + ghostNumber + " " + ghoulNumber);
    
   sList = new Skeleton[skeletonNumber];
  gList = new Ghost[ghostNumber];
  ghList = new Ghoul[ghoulNumber];
    
    
    
    x = 0;
    //sky ends after y value
    y = 64;
    for(int i = 0; i < xL; i++){
      for(int z = 0; z < yL; z++){
        if(enemyLayout[i][z] == 's'){
          sList[skeletonNumber2] = new Skeleton(32*i,32*z,0,0,game,level,enemytxt);
          skeletonNumber2++;

        }
        if(enemyLayout[i][z] == 'g'){
          gList[ghostNumber2] = new Ghost(32*i,32*z,0,0,game,level,enemytxt);
          ghostNumber2++;
        }
        if(enemyLayout[i][z] == 'h'){
          ghList[ghoulNumber2] = new Ghoul(32*i,32*z,0,0,game,level,enemytxt);
          ghoulNumber2++;
        }
        y = y + height;
      }
      x = x + width;
      y = 64;
    }
  }
  
  
  public Skeleton[] getSList()
  {
    return sList;
  }
  
  public Ghost[] getGList()
  {
    return gList;
  }
  
  public Ghoul[] getGhList()
  {
    return ghList;
  }
  
  
  public void paint(Graphics g) {
    Graphics2D g2 = (Graphics2D) g;
  }
  
  
}
